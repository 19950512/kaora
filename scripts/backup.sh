#!/bin/bash

# ==========================================
# SCRIPT DE BACKUP - KAORA PRODU√á√ÉO
# ==========================================

clear

set -e

# Carregar vari√°veis de ambiente
if [[ -f .env ]]; then
    source .env
else
    echo "Arquivo .env n√£o encontrado!"
    exit 1
fi

# Configura√ß√µes
BACKUP_DIR="/backups/kaora"
DATE=$(date +%Y%m%d_%H%M%S)
COMPOSE_FILE="docker-compose.prod.yml"

# Cores para output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Criar diret√≥rio de backup se n√£o existir
mkdir -p "$BACKUP_DIR"

log_info "üóÑÔ∏è Iniciando backup do Kaora - $DATE"

# Verificar se DATABASE_URL est√° configurada
if [[ -z "$DATABASE_URL" ]]; then
    log_error "‚ùå DATABASE_URL n√£o est√° configurada no arquivo .env"
    log_info "Configure a vari√°vel DATABASE_URL para o cluster PostgreSQL externo"
    exit 1
fi

# Extrair dados da CONNECTION STRING para backup
DB_HOST=$(echo $DATABASE_URL | sed -n 's/.*@\([^:]*\):.*/\1/p')
DB_PORT=$(echo $DATABASE_URL | sed -n 's/.*:\([0-9]*\)\/.*/\1/p')
DB_NAME=$(echo $DATABASE_URL | sed -n 's/.*\/\([^?]*\).*/\1/p')
DB_USER=$(echo $DATABASE_URL | sed -n 's/.*:\/\/\([^:]*\):.*/\1/p')
DB_PASS=$(echo $DATABASE_URL | sed -n 's/.*:\/\/[^:]*:\([^@]*\)@.*/\1/p')

# Backup do PostgreSQL externo
log_info "Fazendo backup do PostgreSQL externo..."
PGPASSWORD="$DB_PASS" pg_dump -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" > "$BACKUP_DIR/postgres_backup_$DATE.sql"

if [[ $? -eq 0 ]]; then
    log_info "‚úÖ Backup do PostgreSQL conclu√≠do: postgres_backup_$DATE.sql"
else
    log_error "‚ùå Falha no backup do PostgreSQL externo"
    log_error "Verifique se pg_dump est√° instalado e se a conex√£o com o banco est√° funcionando"
    exit 1
fi

# Backup do Redis (opcional)
log_info "Fazendo backup do Redis..."
docker compose -f "$COMPOSE_FILE" exec -T redis redis-cli --rdb - > "$BACKUP_DIR/redis_backup_$DATE.rdb"

if [[ $? -eq 0 ]]; then
    log_info "‚úÖ Backup do Redis conclu√≠do: redis_backup_$DATE.rdb"
else
    log_warn "‚ö†Ô∏è Falha no backup do Redis (n√£o cr√≠tico)"
fi

# Backup das configura√ß√µes
log_info "Fazendo backup das configura√ß√µes..."
cp .env "$BACKUP_DIR/env_backup_$DATE"
cp "$COMPOSE_FILE" "$BACKUP_DIR/docker-compose_backup_$DATE.yml"

# Compactar backups
log_info "Compactando backups..."
cd "$BACKUP_DIR"
tar -czf "kaora_full_backup_$DATE.tar.gz" *_backup_$DATE* postgres_backup_$DATE.sql redis_backup_$DATE.rdb

# Remover arquivos tempor√°rios
rm -f *_backup_$DATE env_backup_$DATE docker-compose_backup_$DATE.yml postgres_backup_$DATE.sql redis_backup_$DATE.rdb

log_info "‚úÖ Backup completo criado: kaora_full_backup_$DATE.tar.gz"

# Limpar backups antigos (manter apenas os √∫ltimos 7 dias)
log_info "Limpando backups antigos..."
find "$BACKUP_DIR" -name "kaora_full_backup_*.tar.gz" -mtime +7 -delete

log_info "üéâ Backup conclu√≠do com sucesso!"

# Mostrar tamanho do backup
BACKUP_SIZE=$(du -h "$BACKUP_DIR/kaora_full_backup_$DATE.tar.gz" | cut -f1)
log_info "üì¶ Tamanho do backup: $BACKUP_SIZE"

# Listar backups dispon√≠veis
echo ""
log_info "üìã Backups dispon√≠veis:"
ls -lh "$BACKUP_DIR"/kaora_full_backup_*.tar.gz
